/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}

namespace Swig {
  namespace {
    jclass jclass_msgexchangeJNI = NULL;
    jmethodID director_methids[9];
  }
}

#include <string>


#include <stdint.h>		// Use the C99 official header


#include "msgpacket.h"
#include "msgconnection.h"
#include "msgsession.h"
#include "ac3decoder.h"
#include "mpadecoder.h"

SWIGINTERN void MsgPacket_skipBuffer(MsgPacket *self,int length){
		self->consume(length);
	}
SWIGINTERN void MsgPacket_readBuffer(MsgPacket *self,char *BYTE,int offset,int length){
		uint8_t* buffer_src = self->consume(length);
		uint8_t* buffer_dst = (uint8_t*)&BYTE[offset];

		memcpy(buffer_dst, buffer_src, length);
	}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "msgexchange_wrap.h"

SwigDirector_Connection::SwigDirector_Connection(JNIEnv *jenv) : MsgConnection(), Swig::Director(jenv) {
}

SwigDirector_Connection::~SwigDirector_Connection() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


MsgPacket *SwigDirector_Connection::TransmitMessage(MsgPacket *message) {
  MsgPacket *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessage = 0 ;
  
  if (!swig_override[0]) {
    return MsgConnection::TransmitMessage(message);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((MsgPacket **)&jmessage) = (MsgPacket *) message; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[0], swigjobj, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(MsgPacket **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgConnection::TransmitMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_Connection::TransmitMessage(MsgPacket *request, MsgPacket *response) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrequest = 0 ;
  jlong jresponse = 0 ;
  
  if (!swig_override[1]) {
    return MsgConnection::TransmitMessage(request,response);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((MsgPacket **)&jrequest) = (MsgPacket *) request; 
    *((MsgPacket **)&jresponse) = (MsgPacket *) response; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[1], swigjobj, jrequest, jresponse);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgConnection::TransmitMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Connection::OnDisconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    MsgConnection::OnDisconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgConnection::OnDisconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Connection::OnReconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    MsgConnection::OnReconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgConnection::OnReconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Connection::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "transmitMessage", "(Lorg/xvdr/msgexchange/Packet;)Lorg/xvdr/msgexchange/Packet;", NULL 
    },
    {
      "transmitMessage", "(Lorg/xvdr/msgexchange/Packet;Lorg/xvdr/msgexchange/Packet;)Z", NULL 
    },
    {
      "onDisconnect", "()V", NULL 
    },
    {
      "onReconnect", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/xvdr/msgexchange/Connection");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SessionProxy::SwigDirector_SessionProxy(JNIEnv *jenv) : MsgSession(), Swig::Director(jenv) {
}

SwigDirector_SessionProxy::~SwigDirector_SessionProxy() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


MsgPacket *SwigDirector_SessionProxy::TransmitMessage(MsgPacket *message) {
  MsgPacket *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessage = 0 ;
  
  if (!swig_override[0]) {
    return MsgSession::TransmitMessage(message);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((MsgPacket **)&jmessage) = (MsgPacket *) message; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[4], swigjobj, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(MsgPacket **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgSession::TransmitMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SessionProxy::TransmitMessage(MsgPacket *request, MsgPacket *response) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrequest = 0 ;
  jlong jresponse = 0 ;
  
  if (!swig_override[1]) {
    return MsgSession::TransmitMessage(request,response);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((MsgPacket **)&jrequest) = (MsgPacket *) request; 
    *((MsgPacket **)&jresponse) = (MsgPacket *) response; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[5], swigjobj, jrequest, jresponse);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgSession::TransmitMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SessionProxy::OnDisconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    MsgConnection::OnDisconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgSession::OnDisconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionProxy::OnReconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    MsgConnection::OnReconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgSession::OnReconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionProxy::OnNotification(MsgPacket *notification) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnotification = 0 ;
  
  if (!swig_override[4]) {
    MsgSession::OnNotification(notification);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((MsgPacket **)&jnotification) = (MsgPacket *) notification; 
    jenv->CallStaticVoidMethod(Swig::jclass_msgexchangeJNI, Swig::director_methids[8], swigjobj, jnotification);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MsgSession::OnNotification ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionProxy::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "transmitMessage", "(Lorg/xvdr/msgexchange/Packet;)Lorg/xvdr/msgexchange/Packet;", NULL 
    },
    {
      "transmitMessage", "(Lorg/xvdr/msgexchange/Packet;Lorg/xvdr/msgexchange/Packet;)Z", NULL 
    },
    {
      "onDisconnect", "()V", NULL 
    },
    {
      "onReconnect", "()V", NULL 
    },
    {
      "onNotification", "(Lorg/xvdr/msgexchange/Packet;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/xvdr/msgexchange/SessionProxy");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Packet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint32_t arg3 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (MsgPacket *)new MsgPacket(arg1,arg2,arg3);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Packet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (MsgPacket *)new MsgPacket(arg1,arg2);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Packet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = (MsgPacket *)new MsgPacket(arg1);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Packet_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MsgPacket *)new MsgPacket();
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_delete_1Packet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MsgPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1createUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->createUid();
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->put_String((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putU8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint8_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (bool)(arg1)->put_U8(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putU16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (bool)(arg1)->put_U16(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putS16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int16_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (int16_t)jarg2; 
  result = (bool)(arg1)->put_S16(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putU32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)(arg1)->put_U32(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putS32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (bool)(arg1)->put_S32(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putU64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint64_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (bool)(arg1)->put_U64(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1putS64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int64_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (bool)(arg1)->put_S64(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1rewind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->rewind();
}


SWIGEXPORT jstring JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (char *)(arg1)->get_String();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getU8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint8_t)(arg1)->get_U8();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getU16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint16_t)(arg1)->get_U16();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getS16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (int16_t)(arg1)->get_S16();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getU32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->get_U32();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getS32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (int32_t)(arg1)->get_S32();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getU64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint64_t)(arg1)->get_U64();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getS64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (int64_t)(arg1)->get_S64();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1setClientID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setClientID(arg2);
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getClientID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint16_t)(arg1)->getClientID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1eop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (bool)(arg1)->eop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1freeze(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->freeze();
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getPacketLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->getPacketLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getPayloadLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->getPayloadLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->getUID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getMsgID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint16_t)(arg1)->getMsgID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint16_t)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->getCheckSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getPayloadCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint32_t)(arg1)->getPayloadCheckSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1disablePayloadCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->disablePayloadCheckSum();
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1getProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (uint16_t)(arg1)->getProtocolVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1setProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setProtocolVersion(arg2);
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1setMsgID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setMsgID(arg2);
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1compress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->compress(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1isCompressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (bool)(arg1)->isCompressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1uncompress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  result = (bool)(arg1)->uncompress();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  (arg1)->print();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  (arg1)->copy(arg2);
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1headerLength_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::HeaderLength;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1checkSumPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::CheckSumPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1uncompressedPayloadLengthPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::UncompressedPayloadLengthPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1payloadLengthPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::PayloadLengthPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1payloadCheckSumPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::PayloadCheckSumPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1protocolVersionPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::ProtocolVersionPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1clientIDPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::ClientIDPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1typePos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::TypePos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1msgIDPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::MsgIDPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1uIDPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::UIDPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1syncPos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MsgPacket::SyncPos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1skipBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  MsgPacket_skipBuffer(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Packet_1readBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4) {
  MsgPacket *arg1 = (MsgPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgPacket **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  MsgPacket_readBuffer(arg1,arg2,arg3,arg4);
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Connection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MsgConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MsgConnection *)new SwigDirector_Connection(jenv);
  *(MsgConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_delete_1Connection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MsgConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Open((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  (arg1)->Abort();
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (bool)(arg1)->Close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (bool)((MsgConnection const *)arg1)->IsOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1isAborting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (bool)((MsgConnection const *)arg1)->IsAborting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1sendRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (bool)(arg1)->SendRequest(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1readResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (MsgPacket *)(arg1)->ReadResponse();
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1readResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (bool)(arg1)->ReadResponse(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1transmitMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (MsgPacket *)(arg1)->TransmitMessage(arg2);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1transmitMessageSwigExplicitConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (MsgPacket *)(arg1)->MsgConnection::TransmitMessage(arg2);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1transmitMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *arg3 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = *(MsgPacket **)&jarg3; 
  result = (bool)(arg1)->TransmitMessage(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1transmitMessageSwigExplicitConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *arg3 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = *(MsgPacket **)&jarg3; 
  result = (bool)(arg1)->MsgConnection::TransmitMessage(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1setTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTimeout(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1getHostname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (std::string *) &(arg1)->GetHostname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPriority(arg2);
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  result = (int)((MsgConnection const *)arg1)->GetPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1onDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  SwigDirector_Connection *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Connection *>(arg1);
  (darg)->OnDisconnect();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1onDisconnectSwigExplicitConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  SwigDirector_Connection *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Connection *>(arg1);
  (darg)->OnDisconnectSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1onReconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  SwigDirector_Connection *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Connection *>(arg1);
  (darg)->OnReconnect();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1onReconnectSwigExplicitConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MsgConnection *arg1 = (MsgConnection *) 0 ;
  SwigDirector_Connection *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgConnection **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Connection *>(arg1);
  (darg)->OnReconnectSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  MsgConnection *obj = *((MsgConnection **)&objarg);
  (void)jcls;
  SwigDirector_Connection *director = dynamic_cast<SwigDirector_Connection *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Connection_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  MsgConnection *obj = *((MsgConnection **)&objarg);
  SwigDirector_Connection *director = dynamic_cast<SwigDirector_Connection *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1SessionProxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MsgSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MsgSession *)new SwigDirector_SessionProxy(jenv);
  *(MsgSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_delete_1SessionProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MsgSession *arg1 = (MsgSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MsgSession **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Open((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgSession **)&jarg1; 
  result = (bool)(arg1)->Close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MsgSession **)&jarg1; 
  result = (bool)(arg1)->Terminate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1transmitMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (MsgPacket *)(arg1)->TransmitMessage(arg2);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1transmitMessageSwigExplicitSessionProxy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  result = (MsgPacket *)(arg1)->MsgSession::TransmitMessage(arg2);
  *(MsgPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1transmitMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *arg3 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = *(MsgPacket **)&jarg3; 
  result = (bool)(arg1)->TransmitMessage(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1transmitMessageSwigExplicitSessionProxy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  MsgPacket *arg3 = (MsgPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = *(MsgPacket **)&jarg3; 
  result = (bool)(arg1)->MsgSession::TransmitMessage(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1onNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  SwigDirector_SessionProxy *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  darg = dynamic_cast<SwigDirector_SessionProxy *>(arg1);
  (darg)->OnNotification(arg2);
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1onNotificationSwigExplicitSessionProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MsgSession *arg1 = (MsgSession *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  SwigDirector_SessionProxy *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MsgSession **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  darg = dynamic_cast<SwigDirector_SessionProxy *>(arg1);
  (darg)->OnNotificationSwigPublic(arg2);
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  MsgSession *obj = *((MsgSession **)&objarg);
  (void)jcls;
  SwigDirector_SessionProxy *director = dynamic_cast<SwigDirector_SessionProxy *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  MsgSession *obj = *((MsgSession **)&objarg);
  SwigDirector_SessionProxy *director = dynamic_cast<SwigDirector_SessionProxy *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1layoutStereo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Ac3Decoder::LayoutStereo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1layoutDolby_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Ac3Decoder::LayoutDolby;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1layout50_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Ac3Decoder::Layout50;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1layout51_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Ac3Decoder::Layout51;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1channelLayout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->ChannelLayout)) *(int*)(void*)&((arg1)->ChannelLayout) = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1channelLayout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  result = (int) ((arg1)->ChannelLayout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1Ac3Decoder(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Ac3Decoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Ac3Decoder *)new Ac3Decoder(arg1);
  *(Ac3Decoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_delete_1Ac3Decoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ac3Decoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jbyteArray jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0); 
  }
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)(arg1)->decode(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  result = (int)(arg1)->getChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  result = (int)(arg1)->getSampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_Ac3Decoder_1getBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ac3Decoder *arg1 = (Ac3Decoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ac3Decoder **)&jarg1; 
  result = (int)(arg1)->getBitRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_new_1MpegAudioDecoder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MpegAudioDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MpegAudioDecoder *)new MpegAudioDecoder();
  *(MpegAudioDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_delete_1MpegAudioDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MpegAudioDecoder *arg1 = (MpegAudioDecoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MpegAudioDecoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_MpegAudioDecoder_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jbyteArray jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  MpegAudioDecoder *arg1 = (MpegAudioDecoder *) 0 ;
  MsgPacket *arg2 = (MsgPacket *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MpegAudioDecoder **)&jarg1; 
  arg2 = *(MsgPacket **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0); 
  }
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)(arg1)->decode(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_MpegAudioDecoder_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MpegAudioDecoder *arg1 = (MpegAudioDecoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MpegAudioDecoder **)&jarg1; 
  result = (int)(arg1)->getChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_MpegAudioDecoder_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MpegAudioDecoder *arg1 = (MpegAudioDecoder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MpegAudioDecoder **)&jarg1; 
  result = (int)(arg1)->getSampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_SessionProxy_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MsgConnection **)&baseptr = *(MsgSession **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_xvdr_msgexchange_msgexchangeJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[9] = {
    {
      "SwigDirector_Connection_transmitMessage__SWIG_0", "(Lorg/xvdr/msgexchange/Connection;J)J" 
    },
    {
      "SwigDirector_Connection_transmitMessage__SWIG_1", "(Lorg/xvdr/msgexchange/Connection;JJ)Z" 
    },
    {
      "SwigDirector_Connection_onDisconnect", "(Lorg/xvdr/msgexchange/Connection;)V" 
    },
    {
      "SwigDirector_Connection_onReconnect", "(Lorg/xvdr/msgexchange/Connection;)V" 
    },
    {
      "SwigDirector_SessionProxy_transmitMessage__SWIG_0", "(Lorg/xvdr/msgexchange/SessionProxy;J)J" 
    },
    {
      "SwigDirector_SessionProxy_transmitMessage__SWIG_1", "(Lorg/xvdr/msgexchange/SessionProxy;JJ)Z" 
    },
    {
      "SwigDirector_SessionProxy_onDisconnect", "(Lorg/xvdr/msgexchange/SessionProxy;)V" 
    },
    {
      "SwigDirector_SessionProxy_onReconnect", "(Lorg/xvdr/msgexchange/SessionProxy;)V" 
    },
    {
      "SwigDirector_SessionProxy_onNotification", "(Lorg/xvdr/msgexchange/SessionProxy;J)V" 
    }
  };
  Swig::jclass_msgexchangeJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_msgexchangeJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

