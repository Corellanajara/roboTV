/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_msgexchange_WRAP_H_
#define SWIG_msgexchange_WRAP_H_

class SwigDirector_Connection : public MsgConnection, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Connection(JNIEnv *jenv);
    virtual ~SwigDirector_Connection();
    virtual MsgPacket *TransmitMessage(MsgPacket *message);
    virtual void OnDisconnect();
    virtual void OnDisconnectSwigPublic() {
      MsgConnection::OnDisconnect();
    }
    virtual void OnReconnect();
    virtual void OnReconnectSwigPublic() {
      MsgConnection::OnReconnect();
    }
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_SessionProxy : public MsgSession, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SessionProxy(JNIEnv *jenv);
    virtual ~SwigDirector_SessionProxy();
    virtual MsgPacket *TransmitMessage(MsgPacket *message);
    virtual void OnDisconnect();
    virtual void OnDisconnectSwigPublic() {
      MsgConnection::OnDisconnect();
    }
    virtual void OnReconnect();
    virtual void OnReconnectSwigPublic() {
      MsgConnection::OnReconnect();
    }
    virtual void OnNotification(MsgPacket *notification);
    virtual void OnNotificationSwigPublic(MsgPacket *notification) {
      MsgSession::OnNotification(notification);
    }
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};


#endif
